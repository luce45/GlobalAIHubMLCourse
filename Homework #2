import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import Ridge, Lasso
from sklearn.linear_model import RidgeCV, LassoCV
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

boston = datasets.load_boston()

print(boston.DESCR)

bos = pd.DataFrame(boston.data, columns = boston.feature_names)
bos['PRICE'] = boston.target

print(bos.head())

print(bos.info())

print(bos.describe().transpose())

sns.set(rc={'figure.figsize':(11.7,8.27)})
plt.hist(bos['PRICE'], bins=30)
plt.xlabel("House prices in $1000")
plt.show()

bos_1 = pd.DataFrame(boston.data, columns = boston.feature_names)

correlation_matrix = bos_1.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True)
plt.show()

plt.figure(figsize=(20, 5))

features = ['LSTAT', 'RM']
target = bos['PRICE']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = bos[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title("Variation in House prices")
    plt.xlabel(col)
    plt.ylabel('"House prices in $1000"')
    
    scaler = StandardScaler()
X = scaler.fit_transform(X_rooms)
X_train, X_test, Y_train, Y_test = train_test_split(X, y_price, test_size = 0.3, random_state=5)

alpha_lasso = [0.10, 1.00, 2.00, 4.00, 5.00]

for alpha in alpha_lasso:
  model_Lasso = Lasso(alpha=alpha)
  model_Lasso.fit(X_train, Y_train)

  y_train_predict = model_Lasso.predict(X_train)
  rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
  r2 = round(model_Lasso.score(X_train, Y_train),2)

  print("The model performance for training set with alpha = {}".format(alpha))
  print("--------------------------------------")
  print('RMSE is {}'.format(rmse))
  print('R2 score is {}'.format(r2))
  print("\n")
  
  best_model_Lasso = LassoCV(alphas=alpha_lasso)
Model_Lasso_alpha = best_model_Lasso.fit(X_train, Y_train)
print("best alpha for the Lasso model is {}".format(Model_Lasso_alpha.alpha_))

alpha_ridge = [10.00, 100.00, 200.00, 500.00, 1000.00]

for alpha in alpha_ridge:
  model_Ridge = Ridge(alpha=alpha)
  model_Ridge.fit(X_train, Y_train)

  y_train_predict = model_Ridge.predict(X_train)
  rmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))
  r2 = round(model_Ridge.score(X_train, Y_train),2)

  print("The model performance for training set with alpha = {}".format(alpha))
  print("--------------------------------------")
  print('RMSE is {}'.format(rmse))
  print('R2 score is {}'.format(r2))
  print("\n")
  
  best_model_Ridge = RidgeCV(alphas=alpha_ridge)
Model_Ridge_alpha = best_model_Ridge.fit(X_train, Y_train)
print("best alpha for the Ridge model is {}".format(Model_Ridge_alpha.alpha_))
